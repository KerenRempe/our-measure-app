package com.measure;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import android.app.Activity;import android.content.ContentValues;import android.content.Context;import android.net.wifi.ScanResult;import android.net.wifi.WifiManager;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.TextView;public class Radiation extends Activity{		private List<ScanResult> scanResults;    private ListAdapter adapter;	ListView listView; 	Button refreshButton;	String type;	WifiManager wifiManager;		public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);				requestWindowFeature(Window.FEATURE_NO_TITLE);		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,				WindowManager.LayoutParams.FLAG_FULLSCREEN);				setContentView(R.layout.radiation);				  wifiManager=(WifiManager) getSystemService(WIFI_SERVICE);			listView=(ListView)findViewById(R.id.listView1);			refreshButton=(Button)findViewById(R.id.button1);		  //		   scanResults=wifiManager.getScanResults();//		    for (ScanResult scanResult : scanResults) {//		    	if(wifiManager.getConnectionInfo().getSSID().equals(scanResult.SSID)){//		    		Log.i("haha","haha");//		    	}//		    		//		    	Log.i("ssid", scanResult.SSID);//		    	Log.i("信号强度",scanResult.level+"  "+calculateSignalLevel(scanResult.level,4));//		    }		    		    			refreshButton.setOnClickListener(new OnClickListener()			{							public void onClick(View v) {					 scanResults=wifiManager.getScanResults();					    for (ScanResult scanResult : scanResults) {					    	if(wifiManager.getConnectionInfo().getSSID().equals(scanResult.SSID)){					    		Log.i("haha","haha");					    	}					    							    	Log.i("ssid", scanResult.SSID);					    	Log.i("信号强度",scanResult.level+"  "+calculateSignalLevel(scanResult.level,4));					    }					refresh();				}							});						refresh();		    	}				public void refresh(){		scanResults= new ArrayList<ScanResult>();		scanResults=wifiManager.getScanResults();		Collections.sort(scanResults, new ComparatorValues());		adapter = new ListAdapter(this, scanResults);				listView.setAdapter(adapter);				}						public static class ViewHolder{		   TextView name;			   TextView level;		   TextView num;	}			   class ListAdapter extends BaseAdapter{	    		private LayoutInflater inflater;		private List<ScanResult> list;				public ListAdapter(Context context,List<ScanResult> list){			inflater = LayoutInflater.from(context);			this.list = list;		}		public int getCount() {						return list.size();		}		public Object getItem(int position) {					return list.get(position);		}		public long getItemId(int position) {					return 0;		}		public View getView(int position, View convertView, ViewGroup parent) {		    ViewHolder holder = null;		    if(convertView == null){		    	convertView = inflater.inflate(R.layout.radiation_item, null);		    	holder = new ViewHolder();		    			    			    			    	convertView.setTag(holder);		    }else		    {		    	holder = (ViewHolder)convertView.getTag(); 		    }			    	holder.name= (TextView)convertView.findViewById(R.id.textView1);		    	holder.name.setText(list.get(position).SSID);		    			    	holder.level= (TextView)convertView.findViewById(R.id.textView2);		    	holder.level.setText(list.get(position).level+"");		    			    	holder.num = (TextView)convertView.findViewById(R.id.textView3);		    	holder.num.setText(calculateSignalLevel(list.get(position).level,5)+"");		    				return convertView;		}		   	   }		 public int calculateSignalLevel(int rssi, int numLevels) {	        if (rssi <= -110) {	            return 0;	        } else if (rssi >= -20) {	            return numLevels - 1;	        } else {	            int partitionSize = (-20 - -110) / (numLevels - 1);	            return (rssi - -110) / partitionSize;	        }	    }	 	 public static final class ComparatorValues implements Comparator<ScanResult>{	        @Override	        public int compare(ScanResult object1, ScanResult object2) {	            int m1=object1.level;	            int m2=object2.level;	            int result=0;	            if(m1<m2)	            {	                result=1;	            }	            if(m1>=m2)	            {	                result=-1;	            }	            return result;	        }        	        	    }}